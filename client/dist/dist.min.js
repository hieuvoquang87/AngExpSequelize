angular.module("Articles").service("ArticlesStore", [ "ArticlesStoreDef", function(StoreDef) {
    var store = {};
    function getPropertyDescriptor(propertyName) {
        return {
            get: function() {
                return store[propertyName];
            },
            set: function(value) {
                store[propertyName] = value;
            }
        };
    }
    function registerObserver(object, remoteProperty, localProperty) {
        if (object.hasOwnProperty(localProperty)) {
            var temp = object[localProperty];
            Object.defineProperty(object, localProperty, getPropertyDescriptor(remoteProperty));
            object[localProperty] = temp;
        } else {
            Object.defineProperty(object, localProperty, getPropertyDescriptor(remoteProperty));
        }
    }
    function addObserver(object, propertyPairs) {
        if (Array.isArray(propertyPairs)) {
            for (var i = 0; i < propertyPairs.length; i++) {
                registerObserver(object, propertyPairs[i].remoteProperty, propertyPairs[i].localProperty);
            }
        }
    }
    StoreDef.addObserver = addObserver;
    StoreDef.store = store;
    return StoreDef;
} ]).constant("ArticlesStoreDef", {
    UPDATING_ARTICLE: "UPDATING_ARTICLE",
    ARTICLE_LIST: "ARTICLE_LIST",
    CATEGORY_LIST: "CATEGORY_LIST"
});

angular.module("Articles").config([ "$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.when("/articles", "/articles/main");
    $urlRouterProvider.when("/articles/admin", "/articles/admin/articles");
    $urlRouterProvider.when("/articles/admin/articles", "/articles/admin/articles/info");
    $urlRouterProvider.when("/articles/admin/categories", "/articles/admin/categories/info");
    $stateProvider.state("articles", {
        url: "/articles",
        templateUrl: "packages/Articles/views/articles.html",
        controller: "ArticlesController"
    }).state("articles.main", {
        url: "/main",
        templateUrl: "packages/Articles/views/articles-main.html",
        controller: "ArticlesMainController",
        resolve: {}
    }).state("articles.admin", {
        url: "/admin",
        templateUrl: "packages/Articles/views/articles-admin.html",
        controller: "ArticlesAdminController"
    }).state("articles.admin.articles", {
        url: "/articles",
        templateUrl: "packages/Articles/views/admin-articles.html",
        controller: "ArticlesInfoController"
    }).state("articles.admin.articles.info", {
        url: "/info",
        templateUrl: "packages/Articles/views/admin-articles-info.html",
        controller: "AdminArticlesInfoController"
    }).state("articles.admin.articles.create", {
        url: "/create",
        templateUrl: "packages/Articles/views/create-modify-article.html",
        controller: "CreateArticleController"
    }).state("articles.admin.articles.update", {
        url: "/update/:articleId",
        templateUrl: "packages/Articles/views/create-modify-article.html",
        controller: "UpdateArticleController"
    }).state("articles.admin.categories", {
        url: "/categories",
        templateUrl: "packages/Articles/views/admin-categories.html"
    }).state("articles.admin.categories.info", {
        url: "/info",
        templateUrl: "packages/Articles/views/admin-categories-info.html",
        controller: "AdminCategoriesInfoController"
    }).state("articles.admin.categories.create", {
        url: "/create",
        templateUrl: "packages/Articles/views/create-modify-category.html",
        controller: "CreateCategoryController"
    });
} ]).run([ "ArticlesStore", "ArticleService", "CategoryService", function(ArticlesStore, ArticleService, CategoryService) {
    var store = {};
    ArticlesStore.addObserver(store, [ {
        remoteProperty: ArticlesStore.ARTICLE_LIST,
        localProperty: "articles"
    }, {
        remoteProperty: ArticlesStore.CATEGORY_LIST,
        localProperty: "categories"
    } ]);
    CategoryService.findAllCategories(function(results) {
        console.log(ArticlesStore);
        store.categories = results;
    }, function(err) {});
} ]);

angular.module("Articles").controller("AdminArticlesInfoController", [ "$scope", "ArticlesStore", function($scope, ArticlesStore) {
    function init() {
        ArticlesStore.addObserver($scope, [ {
            remoteProperty: ArticlesStore.ARTICLE_LIST,
            localProperty: "articleData"
        } ]);
        $scope.articlesGridOptions = {
            data: $scope.articleData,
            columnDefs: [ {
                field: "title"
            }, {
                field: "author"
            }, {
                field: "createdDate"
            }, {
                field: "lastUpdatedDate"
            } ]
        };
    }
    init();
} ]);

angular.module("Articles").controller("AdminCategoriesInfoController", [ "$scope", "CategoryService", function($scope, CategoryService) {
    function init() {
        $scope.categoryGridOptions = {
            columnDefs: [ {
                field: "name"
            }, {
                field: "createdDate"
            } ]
        };
        CategoryService.findAllCategories(function(results) {
            $scope.categories = results;
        }, function(err) {
            alert("Fail to Get Categories");
        });
    }
    init();
} ]);

angular.module("Articles").controller("ArticlesAdminController", [ "$scope", "$location", function($scope, $location) {
    $scope.isActive = function(route) {
        return route === $location.path();
    };
    function init() {}
    init();
} ]);

angular.module("Articles").controller("ArticlesInfoController", [ "$scope", function($scope) {
    function init() {}
    init();
} ]);

angular.module("Articles").controller("ArticlesMainController", [ "$scope", "ArticleService", "ArticlesStore", "CategoryService", function($scope, ArticleService, ArticlesStore, CategoryService) {
    function init() {
        ArticlesStore.addObserver($scope, [ {
            remoteProperty: ArticlesStore.ARTICLE_LIST,
            localProperty: "articles"
        }, {
            remoteProperty: ArticlesStore.CATEGORY_LIST,
            localProperty: "categories"
        } ]);
    }
    $scope.searchArticlesByTitle = function() {
        var queryString = $scope.queryString;
        ArticleService.findArticlesByTitle(queryString, function(results) {
            $scope.articles = results;
        }, function(err) {
            alert("fail to get Articles");
        });
    };
    init();
} ]);

angular.module("Articles").controller("ArticlesController", [ "$scope", "$resource", "$state", "Article", "ArticlesStore", function($scope, $resource, $state, Article, ArticlesStore) {
    function init() {}
    init();
} ]);

angular.module("Articles").controller("CreateArticleController", [ "$scope", "$state", "ArticleService", "ArticlesStore", function($scope, $state, ArticleService, ArticlesStore) {
    CKEDITOR.replace("brief_editor");
    CKEDITOR.replace("content_editor");
    function init() {
        ArticlesStore.addObserver($scope, [ {
            remoteProperty: ArticlesStore.CATEGORY_LIST,
            localProperty: "categories"
        } ]);
        $scope.input = {};
        $scope.availableCategories = [];
        $scope.selectedCategories = [];
    }
    $scope.$watch("categories", function(newVal, oldVal) {
        if (Array.isArray(newVal) && newVal.length > 0) {
            for (var i = 0; i < newVal.length; i++) {
                $scope.availableCategories.push(newVal[i]);
            }
        }
    });
    $scope.addCategory = function() {
        if ($scope.selectedCategory) {
            var lengthArray = $scope.availableCategories.length;
            for (var i = lengthArray - 1; i >= 0; i--) {
                if ($scope.availableCategories[i]._id === $scope.selectedCategory._id) {
                    $scope.availableCategories.splice(i, 1);
                }
            }
            $scope.selectedCategories.push($scope.selectedCategory);
        }
    };
    $scope.submit = function() {
        var contentBrief = CKEDITOR.instances.brief_editor.getData();
        var contentExtended = CKEDITOR.instances.content_editor.getData();
        ArticleService.createArticle($scope.input.title, $scope.input.author, contentBrief, contentExtended, function(results) {
            $state.go("articles.main");
        }, function(err) {});
    };
    init();
} ]);

angular.module("Articles").controller("CreateCategoryController", [ "$scope", "CategoryService", "ArticlesStore", function($scope, CategoryService, ArticlesStore) {
    function init() {
        ArticlesStore.addObserver($scope, [ {
            remoteProperty: ArticlesStore.CATEGORY_LIST,
            localProperty: "categories"
        } ]);
        $scope.input = {};
        $scope.input.childCategories = [];
        $scope.input.parentCategories = [];
        $scope.selectedChildcategories = [];
        $scope.selectedChildcategories = [];
    }
    $scope.addChildCategory = function() {
        $scope.selectedChildcategories.push($scope.selectedChildCategory);
    };
    $scope.submit = function() {
        CategoryService.createCategory($scope.input.name, function(result) {}, function(err) {});
    };
    init();
} ]);

angular.module("Articles").controller("UpdateArticleController", [ "$scope", "$state", "ArticlesStore", "ArticleService", function($scope, $state, ArticlesStore, ArticleService) {
    ArticlesStore.addObserver($scope, [ {
        remoteProperty: ArticlesStore.UPDATING_ARTICLE,
        localProperty: "selectedArticle"
    }, {
        remoteProperty: ArticlesStore.CATEGORY_LIST,
        localProperty: "categories"
    } ]);
    function init() {
        CKEDITOR.replace("brief_editor");
        CKEDITOR.replace("content_editor");
        $scope.input = {};
        $scope.input.title = $scope.selectedArticle.title;
        $scope.input.author = $scope.selectedArticle.author;
        CKEDITOR.instances.brief_editor.setData($scope.selectedArticle.contentBrief);
        CKEDITOR.instances.content_editor.setData($scope.selectedArticle.contentExtended);
        $scope.availableCategories = [];
        $scope.articleCategories = $scope.selectedArticle.categories;
        for (var i = 0; i < $scope.categories.length; i++) {
            var isDuplicate = false;
            for (var j = 0; j < $scope.selectedArticle.categories.length; j++) {
                if ($scope.categories[i].id === $scope.selectedArticle.categories[j].id) {
                    isDuplicate = true;
                }
            }
            if (!isDuplicate) {
                $scope.availableCategories.push($scope.categories[i]);
            }
        }
        $scope.addCategory = function() {
            if ($scope.selectedCategory) {
                var lengthArray = $scope.availableCategories.length;
                for (var i = lengthArray - 1; i >= 0; i--) {
                    if ($scope.availableCategories[i].id === $scope.selectedCategory.id) {
                        $scope.availableCategories.splice(i, 1);
                    }
                }
                ArticleService.addCategory($scope.selectedArticle, $scope.selectedCategory, function(article) {}, function(err) {
                    alert("Fail to add category");
                });
            }
        };
        $scope.submit = function() {
            $scope.selectedArticle.title = $scope.input.title;
            $scope.selectedArticle.author = $scope.input.author;
            $scope.selectedArticle.contentBrief = CKEDITOR.instances.brief_editor.getData();
            $scope.selectedArticle.contentExtended = CKEDITOR.instances.content_editor.getData();
            ArticleService.updateArticle($scope.selectedArticle, function() {
                $state.go("articles.main");
            }, function() {});
        };
    }
    if ($scope.selectedArticle) {
        init();
    } else {
        $state.go("articles.main");
    }
} ]);

angular.module("Articles").directive("articlePreviewRender", function() {
    return {
        restrict: "A",
        templateUrl: "packages/Articles/views/renderer-article-preview.html",
        controller: "ArticlePreviewRenderController",
        scope: {
            data: "="
        }
    };
}).controller("ArticlePreviewRenderController", [ "$scope", "$state", "ArticlesStore", function($scope, $state, ArticlesStore) {
    ArticlesStore.addObserver($scope, [ {
        remoteProperty: ArticlesStore.UPDATING_ARTICLE,
        localProperty: "selectedArticle"
    } ]);
    $scope.updateArticle = function() {
        var path = "/articles/admin/articles/update/" + $scope.data._id;
        $scope.selectedArticle = $scope.data;
        $state.go("articles.admin.articles.update");
    };
} ]);

angular.module("Articles").directive("rendererCategoryPreview", function() {
    return {
        restrict: "A",
        templateUrl: "packages/Articles/views/renderer-category-preview.html",
        controller: "RendererCategoryPreviewController",
        scope: {
            data: "="
        }
    };
}).controller("RendererCategoryPreviewController", [ "$scope", "$state", "ArticlesStore", function($scope, $state, ArticlesStore) {
    $scope.updateArticle = function() {};
} ]);

angular.module("Articles").service("ArticlesManager", function() {});

angular.module("Articles").factory("Article", [ "$resource", function($resource) {
    var Article = $resource("/articles/:action/:property/:id", {
        id: "@id"
    }, {
        findAll: {
            method: "GET",
            params: {
                action: "findAll"
            },
            isArray: true
        },
        findByTitle: {
            method: "GET",
            params: {
                action: "findBy",
                property: "title"
            },
            isArray: true
        },
        findByAuthor: {
            method: "GET",
            params: {
                action: "findBy",
                property: "title"
            },
            isArray: true
        },
        create: {
            method: "POST",
            params: {
                action: "create"
            }
        },
        update: {
            method: "PUT",
            params: {
                action: "update",
                property: "id",
                id: "@id"
            }
        },
        "delete": {
            method: "DELETE",
            params: {
                action: "delete",
                property: "id",
                id: "@id"
            }
        },
        categories: {
            url: "/articles/:id/categories",
            method: "GET"
        },
        addCategory: {
            url: "/articles/:id/categories/add/:categoryId",
            method: "GET"
        },
        removeCategory: {
            url: "/articles/:id/categories/remove/:categoryId",
            method: "GET"
        }
    });
    Article.prototype.__className = "Article";
    Article.prototype.__relationships = {
        categories: {
            type: "TO_MANY",
            ref: "ArticleCategory"
        }
    };
    PersistentModels.models.Article = Article;
    return Article;
} ]);

angular.module("Articles").factory("ArticleCategory", [ "$resource", function($resource) {
    var ArticleCategory = $resource("/articles", {
        id: "@_id"
    }, {
        findAll: {
            url: "/articles/categories/findAll",
            method: "GET",
            isArray: true
        },
        findById: {
            url: "/articles/categories/id/:id",
            method: "GET",
            params: {
                id: "@_id"
            }
        },
        findByNameLike: {
            url: "/articles/categories/name/:name",
            method: "GET",
            params: {
                name: "name"
            },
            isArray: true
        },
        childCategories: {
            url: "/articles/categories/:id/childCategories",
            method: "GET",
            params: {
                id: "@_id"
            }
        },
        parentCategories: {
            url: "/articles/categories/:id/parentCategories",
            method: "GET",
            params: {
                id: "@_id"
            }
        },
        articles: {
            url: "/articles/categories/:id/articles",
            method: "GET",
            params: {
                id: "@_id"
            }
        },
        create: {
            url: "/articles/categories/create",
            method: "POST"
        },
        update: {
            url: "/articles/categories/update/:id",
            method: "PUT",
            params: {
                id: "@_id"
            }
        },
        "delete": {
            url: "/articles/categories/delete/:id",
            method: "DELETE",
            params: {
                id: "@_id"
            }
        }
    });
    ArticleCategory.prototype.__className = "ArticleCategory";
    ArticleCategory.prototype.__relationships = {
        articles: {
            type: "TO_MANY",
            ref: "Article"
        },
        childCategories: {
            type: "TO_MANY",
            ref: "ArticleCategory"
        },
        parentCategories: {
            type: "TO_MANY",
            ref: "ArticleCategory"
        }
    };
    PersistentModels.models.ArticleCategory = ArticleCategory;
    return ArticleCategory;
} ]);

angular.module("Articles").service("ArticleService", [ "Article", function(Article) {
    return {
        createArticle: function(title, author, contentBrief, content, successFcn, failFcn) {
            Article.create({
                title: title,
                author: author,
                contentBrief: contentBrief,
                contentExtended: content
            }, function(result) {
                successFcn(result);
            }, function(err) {
                failFcn(err);
            });
        },
        updateArticle: function(updatingArticle, successFcn, failFcn) {
            updatingArticle.$update({}, function(result) {
                successFcn(result);
            }, function(err) {
                failFcn(err);
            });
        },
        findArticlesByTitle: function(title, successFcn, failFcn) {
            var article = Article.findByTitle({
                key: title
            }, function(results) {
                successFcn(results);
            }, function(err) {
                failFcn(err);
            });
        },
        addCategory: function(article, category, successFcn, failFcn) {
            article.$addCategory({
                categoryId: category.id
            }, function(result) {
                successFcn(result);
            }, function(err) {
                failFcn(err);
            });
        },
        removeCategory: function(article, category, successFcn, failFcn) {}
    };
} ]);

angular.module("Articles").service("CategoryService", [ "ArticleCategory", function(ArticleCategory) {
    return {
        findAllCategories: function(successFcn, failFcn) {
            ArticleCategory.findAll({}, function(results) {
                successFcn(results);
            }, function(err) {
                failFcn(err);
            });
        },
        createCategory: function(categoryName, successFcn, failFcn) {
            ArticleCategory.create({
                name: categoryName
            }, function(result) {
                successFcn(result);
            }, function(err) {
                failFcn(err);
            });
        }
    };
} ]);

angular.module("ChatApp").service("ChatAppStore", [ "ChatAppStoreDef", function(StoreDef) {
    var store = {};
    function getPropertyDescriptor(propertyName) {
        return {
            get: function() {
                return store[propertyName];
            },
            set: function(value) {
                store[propertyName] = value;
            }
        };
    }
    function registerObserver(object, remoteProperty, localProperty) {
        if (object.hasOwnProperty(localProperty)) {
            var temp = object[localProperty];
            Object.defineProperty(object, localProperty, getPropertyDescriptor(remoteProperty));
            object[localProperty] = temp;
        } else {
            Object.defineProperty(object, localProperty, getPropertyDescriptor(remoteProperty));
        }
    }
    function addObserver(object, propertyPairs) {
        if (Array.isArray(propertyPairs)) {
            for (var i = 0; i < propertyPairs.length; i++) {
                registerObserver(object, propertyPairs[i].remoteProperty, propertyPairs[i].localProperty);
            }
        }
    }
    StoreDef.addObserver = addObserver;
    StoreDef.store = store;
    return StoreDef;
} ]).constant("ChatAppStoreDef", {
    CURRENT_USER: "CURRENT_USER"
});

angular.module("ChatApp").config([ "$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.when("/articles", "/articles/main");
    $stateProvider.state("chatapp", {
        url: "/chatapp",
        templateUrl: "packages/ChatApp/views/chat-app.html",
        controller: "ChatAppController"
    });
} ]);

angular.module("ChatApp").controller("ChatAppController", [ "$scope", "chatMessages", "chatUser", "userService", "$firebaseAuth", "ChatAppStore", "chatService", function($scope, chatMessages, chatUser, userService, $firebaseAuth, ChatAppStore, chatService) {
    function init() {
        ChatAppStore.addObserver($scope, [ {
            remoteProperty: ChatAppStore.CURRENT_USER,
            localProperty: "currentUser"
        } ]);
        var ref = new Firebase("https://shining-inferno-6830.firebaseio.com/users");
        $scope.authObj = $firebaseAuth(ref);
        $scope.login = {};
        $scope.request = {};
        $scope.conversation = [];
        $scope.sendingMessage = {};
    }
    $scope.user = "Guest " + Math.round(Math.random() * 100);
    $scope.messages = chatMessages;
    $scope.addMessage = function() {
        $scope.messages.$add({
            from: $scope.currentUser.email,
            content: $scope.message
        });
        $scope.message = "";
    };
    $scope.createUser = function() {
        userService.createUser({
            email: $scope.newEmail,
            password: $scope.newPassword
        }, function(authData) {
            $scope.currentUser = authData;
        }, function(err) {});
    };
    $scope.doLogin = function() {
        userService.login({
            email: $scope.login.email,
            password: $scope.login.password
        }, function(userData) {
            $scope.conversations = $scope.currentUser.conversations;
        }, function(err) {});
    };
    $scope.doAddFriend = function() {
        if ($scope.currentUser) {
            chatService.sendFriendRequest($scope.currentUser, $scope.request.friendName, function() {
                alert("Request Successfully Sent");
            }, function() {});
        } else {
            alert("You need to login first");
        }
    };
    $scope.sendMessage = function() {
        if ($scope.currentUser) {
            chatService.sendMessage($scope.currentUser, $scope.sendingMessage.recipientName, $scope.sendingMessage.content);
        }
    };
    $scope.$watch("currentUser.conversations", function(newVal, oldVal) {
        if ($scope.currentUser) {
            chatService.loadConversations($scope.currentUser.conversations);
        }
    });
    init();
} ]);

angular.module("ChatApp").factory("chatMessages", [ "$firebaseArray", function($firebaseArray) {
    var ref = new Firebase("https://shining-inferno-6830.firebaseio.com/messages");
    return $firebaseArray(ref);
} ]);

angular.module("ChatApp").factory("chatUser", [ "$firebaseObject", function($firebaseObject) {
    var ref = new Firebase("https://shining-inferno-6830.firebaseio.com/users");
    return function(userId) {
        return new $firebaseObject(ref.child(userId));
    };
} ]);

angular.module("ChatApp").service("chatService", [ "$firebaseObject", "$firebaseArray", "$firebaseAuth", "ChatAppStore", function($firebaseObject, $firebaseArray, $firebaseAuth, ChatAppStore) {
    var user = {};
    ChatAppStore.addObserver(user, [ {
        remoteProperty: ChatAppStore.CURRENT_USER,
        localProperty: "currentUser"
    } ]);
    var conversationUrl = "https://shining-inferno-6830.firebaseio.com/conversations";
    var requestUrl = "https://shining-inferno-6830.firebaseio.com/requests";
    var userRef = new Firebase("https://shining-inferno-6830.firebaseio.com/users");
    var conversationRef = new Firebase(conversationUrl);
    var requestRef = new Firebase(requestUrl);
    function sendMessage(conversationId, sendingMessage) {
        var messages = $firebaseArray(new Firebase(conversationUrl + "/" + conversationId + "/messages"));
        messages.$add(sendingMessage).catch(function(err) {
            console.log(err);
            alert("Fail To Send message");
        });
    }
    return {
        loadConversations: function(conversations) {
            for (var i in conversations) {
                var conversationId = user.currentUser.conversations[i].conversationId;
                if (!user.currentUser.conversations[i].messages) {
                    user.currentUser.conversations[i].sender = i;
                    user.currentUser.conversations[i].messages = $firebaseArray(new Firebase(conversationUrl + "/" + conversationId + "/messages"));
                }
            }
        },
        sendFriendRequest: function(currentUser, recipientName, successFcn, failFcn) {
            if (currentUser) {
                var conversationId = currentUser.conversations ? currentUser.conversations[recipientName] : undefined;
                var conversations = $firebaseArray(conversationRef);
                if (conversationId) {
                    alert("Request already sent");
                    return conversationId;
                } else {
                    conversations.$add({}).then(function(ref) {
                        ref.child(currentUser.name).set(true);
                        ref.child(recipientName).set(false);
                        conversationId = ref.key();
                        if (userRef.child(currentUser.$id).child("conversations").child(recipientName).child(conversationId)) userRef.child(currentUser.$id).child("conversations").child(recipientName).set({
                            conversationId: conversationId
                        });
                        var requests = $firebaseArray(new Firebase(requestRef + "/" + recipientName + "/requests"));
                        requests.$add({
                            from: currentUser.name,
                            requesterId: currentUser.$id,
                            message: "Please Add Me to List",
                            conversationId: conversationId
                        }).then(function(ref) {
                            successFcn(conversationId);
                        }).catch(function(err) {
                            failFcn(err);
                        });
                    }).catch(function(err) {});
                }
            }
        },
        respondToFriendRequest: function(request, isRequestAccepted, successFcn, failFcn) {},
        sendMessage: function(currentUser, recipientName, message) {
            var sendingMessage = {
                from: currentUser.name,
                content: message
            };
            if (!currentUser.conversations) {
                currentUser.conversations = {};
            }
            var conversationId = currentUser.conversations[recipientName] ? currentUser.conversations[recipientName].conversationId : undefined;
            if (conversationId) {
                sendMessage(conversationId, sendingMessage);
            } else {
                conversationId = this.sendFriendRequest(currentUser, recipientName, function(conversationId) {
                    sendMessage(conversationId, sendingMessage);
                    loadConversations(user.currentUser);
                }, function() {});
            }
        }
    };
} ]);

angular.module("ChatApp").service("userService", [ "$firebaseObject", "$firebaseArray", "$firebaseAuth", "ChatAppStore", function($firebaseObject, $firebaseArray, $firebaseAuth, ChatAppStore) {
    var user = {};
    ChatAppStore.addObserver(user, [ {
        remoteProperty: ChatAppStore.CURRENT_USER,
        localProperty: "currentUser"
    } ]);
    var userUrl = "https://shining-inferno-6830.firebaseio.com/users";
    var requestUrl = "https://shining-inferno-6830.firebaseio.com/requests";
    var conversationUrl = "https://shining-inferno-6830.firebaseio.com/conversations";
    var ref = new Firebase("https://shining-inferno-6830.firebaseio.com/users");
    var requestRef = new Firebase("https://shining-inferno-6830.firebaseio.com/requests");
    var userRequests = $firebaseArray(requestRef);
    var users = $firebaseArray(ref);
    var authObj = $firebaseAuth(ref);
    function getName(authData) {
        switch (authData.provider) {
          case "password":
            return authData.password.email.replace(/@.*/, "");

          case "twitter":
            return authData.twitter.displayName;

          case "facebook":
            return authData.facebook.displayName;
        }
    }
    function checkNewRequest(currentUserName, userData) {
        var userRequestRef = new Firebase(requestUrl + "/" + currentUserName + "/requests");
        $firebaseArray(userRequestRef).$loaded().then(function(requests) {
            for (var i = 0; i < requests.length; i++) {
                var conversationId = requests[i].conversationId;
                userData.child("conversations").child(requests[i].from).set({
                    conversationId: conversationId
                });
            }
        });
    }
    return {
        createUser: function(args, successFcn, failFcn) {
            var email = args.email, password = args.password;
            authObj.$createUser({
                email: email,
                password: password
            }).then(function() {
                return authObj.$authWithPassword({
                    email: email,
                    password: password
                });
            }).then(function(authData) {
                ref.child(authData.uid).set({
                    provider: authData.provider,
                    name: getName(authData)
                }, function(err) {
                    if (err) {
                        failFcn(err);
                    } else {
                        requestRef.child(getName(authData)).set({
                            email: email,
                            userId: authData.uid
                        }, function(err) {
                            if (err) {
                                failFcn(err);
                            } else {
                                var userData = ref.child(authData.uid);
                                user.currentUser = new $firebaseObject(userData);
                                successFcn(user.currentUser);
                            }
                        });
                    }
                });
            }).catch(function(error) {
                console.error("Error: ", error);
                failFcn(error);
            });
        },
        login: function(args, successFcn, failFcn) {
            authObj.$authWithPassword({
                email: args.email,
                password: args.password
            }).then(function(authData) {
                var userData = ref.child(authData.uid);
                $firebaseObject(userData).$loaded().then(function(ref) {
                    user.currentUser = ref;
                    successFcn(user.currentUser);
                });
                var userRequestRef = new Firebase(requestUrl + "/" + getName(authData) + "/requests");
                userRequestRef.on("child_added", function(snapshot) {
                    checkNewRequest(getName(authData), userData);
                    var requests = $firebaseArray(userRequestRef).$loaded().then(function(ref) {
                        var length = requests.length;
                        for (var i = length - 1; i >= 0; i--) {
                            userRequestRef.$remove(userRequestRef[0]);
                        }
                    });
                });
            }).catch(function(error) {});
        }
    };
} ]);

"use strict";

angular.module("myApp").config([ "$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise("/home");
    $stateProvider.state("home", {
        url: "/home",
        templateUrl: "packages/Main/views/home.html",
        controller: "HomeCtrl"
    }).state("view2", {
        url: "/view2",
        templateUrl: "packages/Main/views/view2.html",
        controller: "View2Ctrl"
    });
} ]);

"use strict";

angular.module("myApp.views").controller("HomeCtrl", [ "$scope", "$http", function($scope, $http) {
    $scope.btnClick = function() {
        $http.get($scope.path).success(function(data, status, headers, config) {
            $scope.result = data;
        }).error(function(data, status, headers, config) {});
    };
    $scope.btnCreateClick = function() {
        $http.post($scope.path, {
            name: $scope.categoryName
        }).success(function(data, status, headers, config) {
            $scope.result = data;
        }).error(function(data, status, headers, config) {});
    };
} ]);

angular.module("myApp.views").directive("mainView", function() {
    return {
        restrict: "A",
        templateUrl: "packages/Main/views/main-view.html",
        controller: "MainViewController"
    };
}).controller("MainViewController", [ "$scope", function($scope) {} ]);

"use strict";

angular.module("myApp.views").controller("View2Ctrl", [ function() {} ]);